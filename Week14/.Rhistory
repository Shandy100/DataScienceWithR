link<-"https://myanimelist.net/topanime.php?type=bypopularity"
web<-read_html(link)
Rank<-web%>%html_nodes(".top-anime-rank-text")%>%html_text()
Title<-web%>%html_nodes(".anime_ranking_h3 a")%>%html_text()
#Score<-web%>%html_nodes("text on score-label score-8 selectorgadget_selected")%>%html_text()
epi<-web%>%html_nodes(".mt4")%>%html_text()
mal<-data.frame(Rank,Title,epi)
View(mal)
library(flexdashboard)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
install.packages("rgeos")
library(flexdashboard)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
library(mapproj)
install.packages("mapproj")
library(mapproj)
ci <-read.csv("coronaIndia.csv")
ci$confirmed<-as.numeric(ci$confirmed)
ci$cured<-as.numeric(ci$cured)
ci$death<-as.numeric(ci$death)
confirm <- sum(ci[,3])
cur <-sum(ci[,4])
dt <-sum(ci[,5])
library(flexdashboard)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
library(mapproj)
library(dplyr)
covidind<-read.csv("coronaIndia.csv")
covidind$confirmed<-as.numeric(covidind$confirmed)
covidind$cured<-as.numeric(covidind$cured)
covidind$death<-as.numeric(covidind$death)
states_shape = readShapeSpatial("IND_adm1.shp")
class(states_shape)
names(states_shape)
print(states_shape$ID_1)
print(states_shape$NAME_1)
plot(states_shape)
score <- covidind$confirmed
State_data = data.frame(id=states_shape$ID_1, NAME_1=states_shape$NAME_1, score)
fortify_shape = fortify(states_shape, region = "ID_1")
State_data = data.frame(id=states_shape$ID_1, NAME_1=states_shape$NAME_1, score)
fortify_shape = fortify(states_shape, region = "ID_1")
plot(states_shape)
score <- covidind$confirmed
State_data = data.frame(id=states_shape$ID_1, NAME_1=states_shape$NAME_1, score)
fortify_shape = fortify(states_shape, region = "ID_1")
fortify_shape = fortify(states_shape, region = "ID_1")
library(flexdashboard)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
library(mapproj)
library(dplyr)
fortify_shape = fortify(states_shape, region = "ID_1")
install.packages("maptools")
library(flexdashboard)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
library(mapproj)
library(dplyr)
fortify_shape = fortify(states_shape, region = "ID_1")
View(fortify_shape)
View(fortify_shape)
View(fortify_shape)
Merged_data = merge(fortify_shape, State_data, by="id", all.x=TRUE)
View(Merged_data)
Map_plot = Merged_data[order(Merged_data$order), ]
ggplot()+ geom_polygon(data = Map_plot,
aes(x = long, y = lat, group = group, fill = score),
color = "black", size = 0.5) +
coord_map()
# load the required packages
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
recommendation <- read.csv('recommendation.csv',stringsAsFactors = F,header=T)
#head(recommendation)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Bank Revenue Report")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "Revenue per Account"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyPrd", height = "300px")
)
,box(
title = "Revenue per Product"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyRegion", height = "300px")
)
)
# combine the two fluid rows to make the body
body <- dashboardBody(frow1, frow2)
#completing the ui part with dashboardPage
ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue,  big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value,big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
shinyApp(ui, server)
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Code/VAC/week_123/Shiny/app')
# load the required packages
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
recommendation <- read.csv('recommendation.csv',stringsAsFactors = F,header=T)
#head(recommendation)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Bank Revenue Report")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "Revenue per Account"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyPrd", height = "300px")
)
,box(
title = "Revenue per Product"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyRegion", height = "300px")
)
)
# combine the two fluid rows to make the body
body <- dashboardBody(frow1, frow2)
#completing the ui part with dashboardPage
ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue,  big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value,big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
shinyApp(ui, server)
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
library(shiny)
require(shinydashboard)
require(shinydashboard)
library(ggplot2)
library(dplyr)
library(shiny)
library(ggplot2)
library(dplyr)
library(shiny)
require(shinydashboard)
recommendation <- read.csv('recommendation.csv',stringsAsFactors = F,header=T)
#head(recommendation)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Bank Revenue Report")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "Revenue per Account"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyPrd", height = "300px")
)
,box(
title = "Revenue per Product"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyRegion", height = "300px")
)
)
# combine the two fluid rows to make the body
body <- dashboardBody(frow1, frow2)
#completing the ui part with dashboardPage
ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue,  big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value,big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
shinyApp(ui, server)
install.packages(c("backports", "cachem", "callr", "caTools", "cli", "crayon", "digest", "dplyr", "fansi", "fastmap", "future", "future.apply", "generics", "ggplot2", "globals", "hms", "isoband", "jsonlite", "knitr", "magrittr", "pillar", "pkgbuild", "processx", "ps", "R6", "rappdirs", "Rcpp", "rprojroot", "rstudioapi", "sass", "testthat", "tibble", "tinytex", "vctrs", "withr"))
install.packages(c("backports", "cachem", "callr", "caTools", "cli", "crayon", "digest", "dplyr", "fansi", "fastmap", "future", "future.apply", "generics", "ggplot2", "globals", "hms", "isoband", "jsonlite", "knitr", "magrittr", "pillar", "pkgbuild", "processx", "ps", "R6", "rappdirs", "Rcpp", "rprojroot", "rstudioapi", "sass", "testthat", "tibble", "tinytex", "vctrs", "withr"))
install.packages(c("backports", "cachem", "callr", "caTools", "cli", "crayon", "digest", "dplyr", "fansi", "fastmap", "future", "future.apply", "generics", "ggplot2", "globals", "hms", "isoband", "jsonlite", "knitr", "magrittr", "pillar", "pkgbuild", "processx", "ps", "R6", "rappdirs", "Rcpp", "rprojroot", "rstudioapi", "sass", "testthat", "tibble", "tinytex", "vctrs", "withr"))
setwd("~/Code/VAC/week_142")
library(modeest)
library(modest)
library(ggplot2)
library(moments)
library(bayestestR)
library(dplyr)
library("MASS")
neo <- read.csv("neo.csv")
#Cleaning the data
neo$Object <- gsub("\\(|\\)","", neo$Object)
neo$CA.Date<- as.Date(neo$CA.Date, "%d-%m-%y")
library(modeest)
library(modest)
library(ggplot2)
library(moments)
library(bayestestR)
library(dplyr)
library("MASS")
neo <- read.csv("neo.csv")
#Cleaning the data
neo$Object <- gsub("\\(|\\)","", neo$Object)
neo$CA.Date<- as.Date(neo$CA.Date, "%d-%m-%y")
# Z-Test
scores <- sd(neo$Estimated.Diameter.maximum..m.)*sqrt((length(neo$Estimated.Diameter.maximum..m.)-1)/(length(neo$Estimated.Diameter.maximum..m.)))
library(modeest)
library(modest)
library(ggplot2)
library(moments)
library(bayestestR)
library(dplyr)
library("MASS")
neo <- read.csv("neo.csv")
#Cleaning the data
neo$Object <- gsub("\\(|\\)","", neo$Object)
neo$CA.Date<- as.Date(neo$CA.Date, "%d-%m-%y")
# Z-Test
scores <- sd(neo$Estimated.Diameter.maximum..m.)*sqrt((length(neo$Estimated.Diameter.maximum..m.)-1)/(length(neo$Estimated.Diameter.maximum..m.)))
diamean <- mean(neo$Estimated.Diameter.maximum..m.)
zscore <- (neo$Estimated.Diameter.maximum..m. - diamean)/scores
View(zscore)
plot(zscore)
#Finding T test two sided
t.test(neo$CA.Distance.Nominal..au., mu=1.3,alternative="two.sided")
#Finding T test one sided
t.test(neo$CA.Distance.Nominal..au.)
# Perform the Chi-Square test.
print(chisq.test(neo.data))
#chi square test
neo.data <- data.frame(neo$Estimated.Diameter.minimum..m., neo$Estimated.Diameter.maximum..m.)
# Perform the Chi-Square test.
print(chisq.test(neo.data))
#Finding T test two sided
t.test(neo$CA.Distance.Nominal..au., mu=1.3,alternative="two.sided")
#Finding T test one sided
t.test(neo$CA.Distance.Nominal..au.)
#chi square test
neo.data <- data.frame(neo$Estimated.Diameter.minimum..m., neo$Estimated.Diameter.maximum..m.)
# Perform the Chi-Square test.
print(chisq.test(neo.data))
library(modeest)
library(modest)
library(ggplot2)
library(moments)
library(bayestestR)
library(dplyr)
library("MASS")
neo <- read.csv("neo.csv")
#Cleaning the data
neo$Object <- gsub("\\(|\\)","", neo$Object)
neo$CA.Date<- as.Date(neo$CA.Date, "%d-%m-%y")
# Z-Test
scores <- sd(neo$Estimated.Diameter.maximum..m.)*sqrt((length(neo$Estimated.Diameter.maximum..m.)-1)/(length(neo$Estimated.Diameter.maximum..m.)))
diamean <- mean(neo$Estimated.Diameter.maximum..m.)
zscore <- (neo$Estimated.Diameter.maximum..m. - diamean)/scores
View(zscore)
plot(zscore)
#Finding T test two sided
t.test(neo$CA.Distance.Nominal..au., mu=1.3,alternative="two.sided")
#Finding T test one sided
t.test(neo$CA.Distance.Nominal..au.)
#chi square test
neo.data <- data.frame(neo$Estimated.Diameter.minimum..m., neo$Estimated.Diameter.maximum..m.)
# Perform the Chi-Square test.
print(chisq.test(neo.data))
library(modeest)
library(modest)
library(ggplot2)
library(moments)
library(bayestestR)
library(dplyr)
library("MASS")
neo <- read.csv("neo.csv")
#Cleaning the data
neo$Object <- gsub("\\(|\\)","", neo$Object)
neo$CA.Date<- as.Date(neo$CA.Date, "%d-%m-%y")
# Z-Test
scores <- sd(neo$Estimated.Diameter.maximum..m.)*sqrt((length(neo$Estimated.Diameter.maximum..m.)-1)/(length(neo$Estimated.Diameter.maximum..m.)))
diamean <- mean(neo$Estimated.Diameter.maximum..m.)
zscore <- (neo$Estimated.Diameter.maximum..m. - diamean)/scores
View(zscore)
plot(zscore)
#Finding T test two sided
t.test(neo$CA.Distance.Nominal..au., mu=1.3,alternative="two.sided")
#Finding T test one sided
t.test(neo$CA.Distance.Nominal..au.)
#chi square test
neo.data <- data.frame(neo$Estimated.Diameter.minimum..m., neo$Estimated.Diameter.maximum..m.)
# Perform the Chi-Square test.
print(chisq.test(neo.data))
#performing correlation test
cor.test(neo$CA.Distance.Minimum..au., neo$Estimated.Diameter.maximum..m.,
method = "pearson")
# Create a contigency table with the needed variables.
neo.data = table(neo$CA.Distance.Minimum..au., neo$Estimated.Diameter.maximum..m.)
hist(neo.data)
anotest <- aov(neo$CA.Distance.Minimum..au.~neo$CA.Distance.Nominal..au., data=neo)
summary(anotest)
anotest2 <-aov(neo$CA.Distance.Minimum..au.~neo$CA.Distance.Nominal..au. + neo$Estimated.Diameter.minimum..m., data=neo)
